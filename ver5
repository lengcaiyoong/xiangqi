
###Tutorial
    t <- function(){
    cat("
    Tutorial:
    writeClipboard(N): next step; format [C 1 1 3 1]
    p(q)	: display current qi pu
    p(L)	: lists of qi pu
    show(): display certain chess
    p_c   : plot chess
    g()	: create new qi pu
    up	: UPPERCASE
    lw	: lowercase
    to reset: list() -> L ; g() -> q

    'START with CTRL + V'

")}


#### Declare F(x)

###Create qi pu
    g <- function(){ 
       state <- matrix('.',10,9)
       state[1,] <- c("C","M","X","S","J","S","X","M","C")
       state[10,] <- tolower( c("C","M","X","S","J","S","X","M","C"))
       state[3,2] <- "P"
       state[3,8] <- "P"
       state[8,2] <- 'p'
       state[8,8] <- 'p'
       state[4,] <- c(rep(c('Z','.'),4),'Z')
       state[7,] <- c(rep(c('b','.'),4),'b')
      g <- matrix('=',11,9)
      g[-6,] <- state 
      return(g)
      }  #create qi2 pu3

###Declare empty var q and L 
    q <- g()   #variable q as qi2 pu3   
    L <- list() #create L list


###Show only intended elements
     # for multiple patterns, eg. show(q,'1|J0')
     # show(q, paste(up,'|j',sep=''))

    #declare upper and lower variable
     up = "[[:upper:]]"
     lw = "[[:lower:]]"
     let= "[A-Za-z]"
     upj= "[[:upper:]]|j"
     lwj= "[[:lower:]]|J"

    show <- function(matrix,toshow){
       matrix[-grep(toshow,matrix)] <- ''
       p(matrix)
    }


###plot chess
p_c <- function(m){


x <- seq(0,1+(2/9),1/9)	#set X-axis interval
y <- seq(0,1,1/11)	#set Y-axis interval

plot(x,y,xlim=c(0,1),ylim=c(0,1) , type='n',ann=F)
abline(h=y, v=x, lty=3)	#set blank graph

plot_chess <- function(i,col){
rect(

	(x[col(m)+1])[i] - 1/9,
	(y[row(m)[nrow(m):1,]+1])[i] - 1/11,

	(x[col(m)+1])[i],
	(y[row(m)[nrow(m):1,]+1])[i],

	col=col
	)
} #plot fx


for (i in grep(lw,m)) {
	col <- 'red'
	plot_chess(i,col)
points(
((x[col(m)+1])[i])-(1/9/2),
((y[row(m)[nrow(m):1,]+1])[i])-(1/11/2),
pch=(grep(m[i],letters) + 96),
col='black')
	}	#plot lowercase chess

for (i in grep(up,m)) {
	col <- 'grey'
	plot_chess(i,col)
points(
((x[col(m)+1])[i])-(1/9/2),
((y[row(m)[nrow(m):1,]+1])[i])-(1/11/2),
pch=(grep(m[i],LETTERS) + 64),
col='white')
	}	#plot uppercase chess

}









###Fx print without quotes
p <- function(q){
	print(q,quote= F)		
	} 




###next step
n <- function(){

input_info = readline(prompt = "ENTER: ")
qi = unlist(strsplit(input_info,' '))[1]
r1 = as.integer(unlist(strsplit(input_info,' '))[2])
c1 = as.integer(unlist(strsplit(input_info,' '))[3])
r2 = as.integer(unlist(strsplit(input_info,' '))[4])
c2 = as.integer(unlist(strsplit(input_info,' '))[5])

q[r1,c1]<-'.'
q[r2,c2]<-qi
p(q)
}


###clipboard
N = 'L <- append(L,list(q)); n() -> q'
writeClipboard(N)

###start
t(); p(q)
